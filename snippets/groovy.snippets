# See also tem in gsp_snips.vim
snippet tem
	render(template:\"${1:name}\",model:[${2:name}:${3:obj}])
# Bang operator for Unix/Linux
snippet #!
	#!/usr/bin/env groovy

# Simple if condition
snippet if
	if (${1:condition}) {
		${2:// body...}
	}
# Simple else condition (keep it simple for now, and just save keystrokes)
snippet el
	else {
		${1:// body...}
	}
# If .. Else condition
snippet ife
	if (${1:condition}) {
		${2 // some code ...}
	} else {
		${3}
	}
# println
snippet pr
	println "${1:message}"
# println with single quote
snippet pr'
	println '${1:message}'
# Each with Index
snippet ewi
	eachWithIndex { ${1:obj} , ${2:i} -> 
		${3:// some code}
	}
# Method name
snippet def
	def ${1:method_name}(${2:params...}) {
		${3:// some code}
	}
# Closure
snippet dfc
	def ${1:closure_name} = {
		${3:// some code}
	}
# Assertions
snippet as
	assert ${1:test} : "${2:Failure message}";${3}
snippet ann
	assertNotNull "${1:message}", ${2:test}
snippet st
	static
snippet fi
	final
snippet ab
	abstract
snippet re
	return
snippet br
	break;
snippet de
	default:
		${1}
snippet ca
	catch(${1:Exception} ${2:e}) ${3}
snippet th
	throw 
snippet sy
	synchronized
snippet im
	import
snippet j.u
	java.util
snippet j.i
	java.io.
snippet j.b
	java.beans.
snippet j.n
	java.net.
snippet j.m
	java.math.
snippet elif
	else if (${1}) ${2}
snippet wh
	while (${1}) ${2}
snippet for
	for (${1}; ${2}; ${3}) ${4}
snippet fore
	for (${1} : ${2}) ${3}
snippet sw
	switch (${1}) ${2}
snippet cs
	case ${1}:
		${2}
	${3}
snippet tc
	public class ${1:`Filename()`} extends ${2:TestCase}
snippet t
	public void test${1:Name}() throws Exception ${2}
snippet cl
	class ${1:`Filename("", "untitled")`} ${2}
snippet in
	interface ${1:`Filename("", "untitled")`} ${2:extends Parent}${3}
snippet m
	${1:void} ${2:method}(${3}) ${4:throws }${5}
snippet v
	${1:String} ${2:var}${3: = null}${4};${5}
snippet co
	static public final ${1:String} ${2:var} = ${3};${4}
snippet cos
	static public final String ${1:var} = "${2}";${3}
