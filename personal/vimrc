"" Enable filetype-specific indenting and plugins
" General Options: {{{1
filetype plugin indent on 
syntax enable

set nocp


" Don't do the stupid wrapping line junk
set nowrap
" smartcase means ignore case unless i type a capITal letter in my search, mmk?
" From http://www.linuxjournal.com/article/3805
set smartcase
set ignorecase
set incsearch

" use confirm instead of aborting an action
set confirm

" http://items.sjbach.com/319/configuring-vim-right
" current directory is always matching the
" content of the active window
" Not a fan of this, due to non-backward compatibility
" set autochdir
" autocmd BufEnter * lcd %:p:h
" Folding -----------
autocmd FileType gsp set foldmethod=indent
" Set fold level to something sensible
set foldlevelstart=2
" However, don't enable folding by default
set nofoldenable

" Leave a line above/below the cursor when at the top
" of the screen
set scrolloff=2
" remember some stuff after quitting vim:
" marks, registers, searches, buffer list
set viminfo='20,<50,s10,h,%
let s:init_dir = expand("%:p:~:h:t")
" let &titlestring  = '%{expand("%:p:~:t")}' . '(%{expand("%:p:h")})' . ' - ' . s:init_dir
" echo &titlestring
" use console dialogs instead of popup
" dialogs for simple choices
set guioptions+=c

" TODO: Document what the heck this does.
" Document it on Notesmine
" I ditched longest, because it only completes *up to* the longest common
" characters.  This results in a lot of tabbing/Ctrl-Ning
set completeopt=menu " ,preview,longest
set wildmode=list:longest,full
set dictionary=/usr/share/dict/words
"
" When no beep or flash is wanted
" Note: This is also needed in gvimrc, or Gvim will "beep"
set vb t_vb=

" Don't show the toolbar
set guioptions-=T
" set guioptions=aegimrLtc
set guioptions=aegitc
" Tell Vim to quit whining about unsaved buffers 
" when I want to open a new buffer.  Vim just hides
" the unsaved buffer, instead of trying to close it.
set hidden

" ------------ Tab and indent settings ------------  
set smartindent
set autoindent

" Softtabstop is shiftwidth is how many spaces are used for auto-indenting
set softtabstop=4
set shiftwidth=4
" Expand tabs to spaces, mmk?
set expandtab

" ------------- tab labels ---------------
" Set the tab labels to just the filename, and not the abbreviated directories
" that are the default setting
set guitablabel=%N\ %t
" Show entire filename on mouseover of tabs
set guitabtooltip=%N\ %F

" ------------- Swap files/Backup Directory ------------
" Set directory for swap files.
" see :h swap
if has('win32')
    set dir=c:\nate\vimswapfiles
else
    set dir=~/tmp
endif

" Status Line
" The %= means right-align.  The %Y means filetype
" set statusline=%F%m%r%h%w\ (%l\,\ %v)%=%Y\ 
set laststatus=2
set statusline=%t%m%w
set statusline+=%r      "read only flag
set statusline+=%h      "help file flag
set statusline+=%=      "left/right separator
set statusline+=(%l,\ %v)\ of\ %L   "cursor line/total lines
set statusline+=\ %P    "percent through file
" Show a pending Vim command like "c" or "d" under the status bar
set showcmd

" Back up files to $HOME/vimbackups
" If that doesn't exist, try one of the $TEMP directories.
" User will need to create a backup directory if Vim whines about not being able to
" make backups.
" e.g. mkdir -p ~/tmp/vimbackups

set backup
set backupdir=$HOME/tmp/vimbackups

" set the directory of the explorer = to the directory
" of the current buffer
set bsdir=buffer

" Automatically lcd whenever me enter a buffer
" autocmd BufEnter * :lcd %:p:h
" Use CSS for TOhtml command
:let html_use_css = 1

" Copied from Arch Linux vimrc ----------
" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
      au!

      " For all text files set 'textwidth' to 78 characters.
      autocmd FileType text setlocal textwidth=78

      " When editing a file, always jump to the last known cursor position.
      " Don't do it when the position is invalid or when inside an event handler
      " (happens when dropping a file on gvim).
      " Also don't do it when the mark is in the first line, that is the default
      " position when opening a file.
      autocmd BufReadPost *
        \ if line("'\"") > 1 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif

  augroup END

else
    echo "I don't have autocmd"
endif " has("autocmd") End Arch vimrc stuff
" }}}1
" Plugin Customizations: {{{1
" Rgrep: {{{2
" Tell Rgrep not to use Xargs on Mac OS 'cause it sucks.
" Previously used has("mac"), except this doesn't work in 
" a terminal, and fubars the grep.vim plugin
let s:os = system("uname")
if s:os =~ "Darwin"
    let g:Grep_Xargs_Options='-0'
endif

" For grep.vim, tell it to ignore .svn directories and log files
let Grep_Skip_Dirs = '.svn log vendor' 
" Ignore case
let Grep_Default_Options = '-i'
" Just default the grep filelist to groovy, gsp and js files
let Grep_Default_Filelist = '*.groovy *.gsp'
" }}}2

" BufKill: {{{2
" BufKill customization not to default to a blank buffer
" if this is the last buffer that's killed
let g:BufKillCommandWhenLastBufferKilled = ''
" }}}2
" BufExplorer options {{{2
" Split new window below current.
let g:bufExplorerSplitBelow=1        
" Show relative paths.
let g:bufExplorerShowRelativePath=1  
" Do not go to 'active window' when I use BufExplorer
" to open a buffer.  Use the existing window / tab that I'm in
let g:bufExplorerFindActive=0        
" }}}2

" Fuzzy options {{{2
" Map ctrl-t to open in tab, like other plugins
" Initializes g:FuzzyFinderOptions.
let g:FuzzyFinderOptions = { 'Base':{}, 'Buffer':{}, 'File':{}, 'Dir':{}, 'MruFile':{}, 'MruCmd':{}, 'Bookmark':{}, 'Tag':{}, 'TaggedFile':{}}
" let g:FuzzyFinderOptions.Base.key_open_tab = '<S-Enter>'
" let g:FuzzyFinderOptions.Base.key_ignore_case = '<C-]>'
" Don't ignore case.  If I type in "RC" I want to find stuff with
" capital R and C in it.
let g:FuzzyFinderOptions.Base.ignore_case = 1
let g:FuzzyFinderOptions.File.excluded_path = '\v\~$|\.svn/|\.o$|\.class$|\.exe$|\.bak$|test/reports/.*\.html$|\.swp$|((^|[/\\])\.[/\\]$)'
let g:FuzzyFinderOptions.Base.enumerating_limit = 40
" }}}2
" NERD Tree {{{2
let NERDTreeHijackNetrw=0
let NERDTreeIgnore=['\.class', '\~$']

" NERD Commenter
" Put a space after comments, like // foo instead of //foo
let NERDSpaceDelims=1
map <leader>cc <Plug>NERDCommenterToggle
" }}}2
" MiniBufExplorer (defunct) {{{2
" let g:miniBufExplMapWindowNavVim = 1
" let g:miniBufExplMapWindowNavArrows = 1
" let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1 
" let g:miniBufExplorerDebugLevel = 10 " MBE reports everything
" let g:miniBufExplorerDebugMode  = 0  " Writes to a file
" }}}2
" Miscellaneous {{{2
let g:SuperTabContextDefaultCompletionType = "<c-n>"
" Html exclude doesn't work anymore
" let g:FuzzyFinder_ExcludePattern = '\.html'
" buftabs plugin shows the buffers in the statusline.  Define what I want
" statusline to be
" buftabs_in_statusline will display tabs in statusline, rather than the flaky
" command line.
" Status Line.  Set a variable which is used by buftab plugin when
" we're setting any statusline except the bottom one.
" The %= means right-align.  The %Y means filetype
let g:statusline='%F%m%r%h%w\ (%l\,\ %v)%=%Y\ '
let g:buftabs_in_statusline=1
let g:buftabs_only_basename=1
let g:qb_hotkey = "<F9>"
let g:bufmru_splashbufs = 0
" }}}2
"" ------------- Source other configfiles -------------
so ~/.vim/personal/menus.vim
so ~/.vim/personal/mappings.vim
so ~/.vim/personal/functions.vim
so ~/.vim/personal/fonts_and_syntax.vim
" Source vimrc.local if it exists.
" doesn't interpolate the ~/
if filereadable($HOME . "/.vim/personal/vimrc.local")
    so ~/.vim/personal/vimrc.local
endif
" vim: set fdm=marker:
