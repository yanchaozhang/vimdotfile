" General Options: {{{1
" append all bundles in the runtimepath to the runtimepath
" This is a hack mentioned here:
" http://github.com/tpope/vim-pathogen/issues/issue/2
filetype off
let g:vim_dir = split(&rtp, ",")[0]
" echo g:vim_dir
let s:bundles = tr(globpath(g:vim_dir, 'bundle/*/'), "\n", ',')
" echo s:bundles
if has("win32")
    let s:bundles = tr(s:bundles, "\\", "/")
endif
let s:afters = tr(globpath(s:bundles, 'after/'), "\n", ',')
let &runtimepath = join([&runtimepath, s:bundles, s:afters], ',')

filetype plugin indent on
syntax enable
set nocp

" Fix arrow keys in terminal vim
" http://vim.wikia.com/wiki/Fix_broken_arrow_key_navigation_in_insert_mode
" set term=builtin_ansi

" Don't do the stupid wrapping line junk
set nowrap
" smartcase means ignore case unless i type a capITal letter in my search, mmk?
" From http://www.linuxjournal.com/article/3805
set smartcase
set ignorecase
set incsearch

" use confirm instead of aborting an action
set confirm

" Make backspace behave on Windoze
set backspace=indent,eol,start

" http://items.sjbach.com/319/configuring-vim-right
" current directory is always matching the
" content of the active window
" Not a fan of this, due to non-backward compatibility
" set autochdir
" autocmd BufEnter * lcd %:p:h
" Folding -----------
autocmd FileType gsp set foldmethod=indent
" Set fold level to something sensible
set foldlevelstart=2
" However, don't enable folding by default
set nofoldenable

" Leave a line above/below the cursor when at the top
" of the screen
set scrolloff=2
" remember some stuff after quitting vim:
" marks, registers, searches, buffer list
set viminfo='20,<50,s10,h,%
let s:init_dir = expand("%:p:~:h:t")
" let &titlestring  = '%{expand("%:p:~:t")}' . '(%{expand("%:p:h")})' . ' - ' . s:init_dir
" echo &titlestring
" use console dialogs instead of popup
" dialogs for simple choices
set guioptions+=c

" TODO: Document what the heck this does.
" Document it on Notesmine
" I ditched longest, because it only completes *up to* the longest common
" characters.  This results in a lot of tabbing/Ctrl-Ning
set completeopt=menu " ,preview,longest
set wildmode=list:longest,full
set dictionary=/usr/share/dict/words
"
" When no beep or flash is wanted
" Note: This is also needed in gvimrc, or Gvim will "beep"
set vb t_vb=

" Don't show the toolbar
set guioptions-=T
" set guioptions=aegimrLtc
set guioptions=aegitc
" Tell Vim to quit whining about unsaved buffers
" when I want to open a new buffer.  Vim just hides
" the unsaved buffer, instead of trying to close it.
set hidden

" ------------ Tab and indent settings ------------
set smartindent
set autoindent

" Softtabstop is shiftwidth is how many spaces are used for auto-indenting
set softtabstop=4
set shiftwidth=4
" Expand tabs to spaces, mmk?
set expandtab

" ------------- tab labels ---------------
" Set the tab labels to just the filename, and not the abbreviated directories
" that are the default setting
set guitablabel=%N\ %t
" Show entire filename on mouseover of tabs
set guitabtooltip=%N\ %F

" ------------- Swap files/Backup Directory ------------
" Set directory for swap files.
" see :h swap
if has('win32')
    set dir=c:\Temp\vimswapfiles\\\\
else
    set dir=$HOME/tmp//,/tmp//
endif

function! MyStatusLine()

    " return '%<%f %(%h%m%r %)%=%{fnamemodify(getcwd(), ":t")} %-15.15(%l,%c%V%)%P'

    let l:statline = '%<%-.45f%m%w'
    let l:statline = l:statline . '%r'                     "read only flag
    let l:statline = l:statline . '%h'                     "help file flag
    let l:statline = l:statline . '%='                     "left/right separator
    let l:statline = l:statline . '%{" | " . fnamemodify(getcwd(), ":~:t") . " | "}'
    let l:statline = l:statline . '%-15.15(%l, %v of %L%)'   "cursor line/total lines
    let l:statline = l:statline . ' %P'                    "percent through file
    return l:statline

endfunction

" Status Line
" The %= means right-align.  The %Y means filetype
" set statusline=%F%m%r%h%w\ (%l\,\ %v)%=%Y\
set laststatus=2
set statusline=%!MyStatusLine()
" Show a pending Vim command like "c" or "d" under the status bar
set showcmd

" Back up files to $HOME/tmp/vimbackups
" If that doesn't exist, try one of the $TEMP directories.
" User will need to create a backup directory if Vim whines about not being able to
" make backups.
" e.g. mkdir -p ~/tmp/vimbackups

set backup
if has('win32')
    set backupdir=c:\Temp\vimbackups
else
    set backupdir=~/tmp/vimbackups
endif

" set the directory of the explorer = to the directory
" of the current buffer
set bsdir=buffer

" Automatically lcd whenever me enter a buffer
" autocmd BufEnter * :lcd %:p:h
" Use CSS for TOhtml command
:let html_use_css = 1

" Copied from Arch Linux vimrc ----------
" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
      au!

      " For all text files set 'textwidth' to 78 characters.
      autocmd FileType text setlocal textwidth=78

      " When editing a file, always jump to the last known cursor position.
      " Don't do it when the position is invalid or when inside an event handler
      " (happens when dropping a file on gvim).
      " Also don't do it when the mark is in the first line, that is the default
      " position when opening a file.
      autocmd BufReadPost *
        \ if line("'\"") > 1 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif

  augroup END

else
    echo "I don't have autocmd"
endif " has("autocmd") End Arch vimrc stuff

" Don't annoyingly jump to the start of the line
" when switching back to a buffer.
" http://stackoverflow.com/questions/1219518/keep-the-cursor-column-while-swapping-buffers-in-vim
set nostartofline
" }}}1
" Plugin Customizations: {{{1
" Rgrep: {{{2
" Tell Rgrep not to use Xargs on Mac OS 'cause it sucks.
" Previously used has("mac"), except this doesn't work in
" a terminal, and fubars the grep.vim plugin
let s:os = system("uname")
if s:os =~ "Darwin"
    let g:Grep_Xargs_Options='-0'
endif

" For grep.vim, tell it to ignore .svn directories and log files
let Grep_Skip_Dirs = '.svn log vendor .git .hg'
" Ignore case, and don't process Binary filez.
let Grep_Default_Options = '-i -I'
" Just default the grep filelist to groovy, gsp and js files
let Grep_Default_Filelist = '*.groovy *.gsp'

if has('win32')
    let Grep_Path = 'c:\cygwin\bin\grep'
    let Grep_Find_Path = 'c:\cygwin\bin\find'
    let Grep_Xargs_Path = 'c:\cygwin\bin\xargs'
    let Grep_Cygwin_Find = 1
    let Grep_Null_Device = 'NUL'
endif
" }}}2

" BufKill: {{{2
" BufKill customization not to default to a blank buffer
" if this is the last buffer that's killed
let g:BufKillCommandWhenLastBufferKilled = ''
" }}}2

" BufExplorer: {{{2
" Split new window below current.
let g:bufExplorerSplitBelow=1
" Show relative paths.
let g:bufExplorerShowRelativePath=1
" Do not go to 'active window' when I use BufExplorer
" to open a buffer.  Use the existing window / tab that I'm in
let g:bufExplorerFindActive=0
" }}}2


" Fuzzyfinder: {{{2
" Map ctrl-t to open in tab, like other plugins
" Initializes g:FuzzyFinderOptions.
let g:FuzzyFinderOptions = { 'Base':{}, 'Buffer':{}, 'File':{}, 'Dir':{}, 'MruFile':{}, 'MruCmd':{}, 'Bookmark':{}, 'Tag':{}, 'TaggedFile':{}}

let g:fuf_mrufile_exclude = '\v\~$|\.(bak|sw[po])$|^(\/\/|\\\\|\/mnt\/)'
" let g:FuzzyFinderOptions.Base.key_open_tab = '<S-Enter>'
" let g:FuzzyFinderOptions.Base.key_ignore_case = '<C-]>'
" Don't ignore case.  If I type in "RC" I want to find stuff with
" capital R and C in it.
let g:FuzzyFinderOptions.Base.ignore_case = 1
let g:fuf_file_exclude = '\v\~$|\.(o|png|PNG|JPG|class|CLASS|jpg|exe|bak|swp)$|(^|[/\\])\.(hg|git|bzr)($|[/\\])|(^|[/\\])target[/\\]|.*[/\\]$'
let g:FuzzyFinderOptions.Base.enumerating_limit = 40
let g:fuf_modesDisable = ['mrucmd']

" }}}2
" NERD Tree:{{{2
let NERDTreeHijackNetrw=0
let NERDTreeIgnore=['\.class', '\~$']
" }}}2

" NERD Commenter: {{{2
" Put a space after comments, like // foo instead of //foo
let NERDSpaceDelims=1
let NERDCreateDefaultMappings=0

" Ack
let g:ackprg="ack-grep -H --nocolor --nogroup --column"
" }}}2

" MiniBufExplorer (defunct) {{{2
" let g:miniBufExplMapWindowNavVim = 1
" let g:miniBufExplMapWindowNavArrows = 1
" let g:miniBufExplMapCTabSwitchBufs = 1
" let g:miniBufExplModSelTarget = 1
" let g:miniBufExplorerDebugLevel = 10 " MBE reports everything
" let g:miniBufExplorerDebugMode  = 0  " Writes to a file
" }}}2

" Miscellaneous Plugins {{{2
let g:SuperTabContextDefaultCompletionType = "<c-n>"
" Quick Buf hotkey.  Quick Buf is good for splitting windows
let g:qb_hotkey = "<F9>"
" CompView window position == bottom
let g:cvWindowPosition = 1

" }}}2

" Templates {{{1
" Load template when creating new file, if there is one
" in the templates directory
function! LoadTemplate(extension)
    let l:templateName='templates/' . a:extension . '.tpl'
    " find this file in user's vimfiles or .vim dir
    let l:filename = findfile(l:templateName, &rtp)
    silent! execute '0r ' . l:filename
    " Highlight %VAR% placeholders with the Todo colour group
    syn match Todo "%\u\+%" containedIn=ALL
endfunction
autocmd BufNewFile * call LoadTemplate(expand('%:e'))
" }}}1

" Other Config Files {{{1
"" ------------- Source other configfiles -------------
runtime personal/menus.vim
runtime personal/mappings.vim
runtime personal/directory_shortcuts.vim
runtime personal/functions.vim
runtime personal/fonts_and_syntax.vim
" Source vimrc.local if it exists.
runtime personal/vimrc.local

let Tlist_Ctags_Cmd="c:/tools/ctags/ctags.exe"
"}}}

" Use the same symbols as TextMate for tabstops and EOLs
if ! has("win32")
    set listchars=tab:▸\ ,eol:¬
endif

iabbrev ilor Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum

" vim: fdm=marker
